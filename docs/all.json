{"shell":true,"revision":"e6cc17b7447e7faf98dfa251cf81c96c97de0047","objects":[{"type":null,"source":"lib/kwfuns.ex:3","object_type":"ModuleObject","moduledoc":"Kwfuns allows to specify keyword list arguments with default values.\n\nIt exposes the macros `defkw`  and `defkwp` to define a function with keyword list arguments available in the body of the function\nexactly the same as positional parameters.\n\nWhile the former defines a public function the later defines a private one.\n\n    defkw say_hello(to, greeting: \"Hello\") do\n      IO.puts( \"#{greeting}, #{to}\" )\n    end\n\nIf values are required that can be specified with the likewise exposed `kw_required` function\n\n    defkw say_hello(to: kw_required, greeting: \"Hello\") do\n      IO.puts( \"#{greeting}, #{to}\" )\n    end\n","module":"Elixir.Kwfuns","id":"Kwfuns"},{"type":"defmacro","source":"lib/kwfuns.ex:34","signature":[["arg",[],"Elixir"],["list",[],"Elixir"]],"object_type":"FunctionObject","name":"defkw","module_id":"Kwfuns","id":"defkw/2","doc":"Define a function with defaulted keyword parameters that are syntactically\navailable in the same way as positional parameters.\n\nHere is a simple example: \n\n    defkw multiply_sum( factor, lhs: 0, rhs: 1 ) do\n      factor * ( lhs + rhs )\n    end\n\nwould correspond to the following code\n\n    def multiply_sum( factor, keywords // [] ) do\n      %{lhs: lhs, rhs: rhs} =\n        Keyword.merge( [lhs: 0, rhs: 0], keywords ) \n        |> Enum.into( %{} )\n      factor * ( lhs + rhs )\n    end\n\nHowever if required keywords are specified as follows:\n\n    defkw multiply_sum( factor: kw_required, lhs: 0, rhs: 0 ) do\n      factor * ( lhs + rhs )\n    end\n\nThe corresponding code is a little bit more complex\n\n    def multiply_sum( keywords // [] ) do\n      missing_keywords = [:factor] -- Keyword.keys( keywords )\n      unless Enum.empty?(missing_keywords) do\n        raise ArgumentError, message: \"The following required keywords have not been provided: factor\" \n      end\n      %{factor: factor, lhs: lhs, rhs: rhs} =\n        Keyword.merge( [lhs: 0, rhs: 0], keywords ) \n        |> Enum.into( %{} )\n      factor * ( lhs + rhs )\n    end\n","arity":2},{"type":"defmacro","source":"lib/kwfuns.ex:87","signature":[["arg",[],"Elixir"],["list",[],"Elixir"]],"object_type":"FunctionObject","name":"defkwp","module_id":"Kwfuns","id":"defkwp/2","doc":"Same semantics as `defkw` but a _private_ function is defined.\n","arity":2},{"type":"def","source":"lib/kwfuns.ex:22","signature":[],"object_type":"FunctionObject","name":"kw_required","module_id":"Kwfuns","id":"kw_required/0","doc":"A unique value that designates a required value. It is made available to the module using `Kwfuns`\n","arity":0}],"language":"elixir","git_repo_url":"https://github.com/RobertDober/lab42_defkw.git","client_version":"0.4.0","client_name":"inch_ex","branch_name":"master","args":[]}